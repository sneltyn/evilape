import { createAsyncThunk, createSlice, EnhancedStore } from "@reduxjs/toolkit";
import { RootState } from "../app/store";
// import { HANDLE_WALLET } from "common/constants";
// import { IpcType } from "common/inetrfaces/Wallet";

const HANDLE_WALLET = "HANDLE_WALLET";

const ipcRenderer = window as any; //.electron.ipcRenderer;

export interface TasksState {
  wallets: any[];
  status: "idle" | "loading" | "failed";
}

const initialState: TasksState = {
  wallets: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addWalletAsync = createAsyncThunk(
  "wallet/add",
  async (wallet: any) => {
    const response = await ipcRenderer.invoke(HANDLE_WALLET, {
      // type: IpcType.Add,
      data: wallet,
    });
    return response;
  }
);

export const deleteWalletAsync = createAsyncThunk(
  "wallet/delete",
  async (wallet: any) => {
    const ok = await ipcRenderer.invoke(HANDLE_WALLET, {
      // type: IpcType.Delete,
      data: wallet.id,
    });

    if (!ok) return;

    return wallet.address;
  }
);

export const walletSlice = createSlice({
  name: "wallet",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    init: (state, action) => {
      console.log(state, action);
      state.wallets = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addWalletAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(addWalletAsync.fulfilled, (state, action) => {
        state.status = "idle";
        console.log("action:", action.payload);
        state.wallets.push(action.payload);
      })
      .addCase(addWalletAsync.rejected, (state) => {
        state.status = "failed";
      })

      // delete

      .addCase(deleteWalletAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deleteWalletAsync.fulfilled, (state, action) => {
        state.status = "idle";

        const address = action.payload;

        console.log(state.wallets);

        state.wallets = state.wallets.filter((x) => x.address == address);
      })
      .addCase(deleteWalletAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { init } = walletSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const allWallets = (state: RootState) => state.wallets.wallets;

export default walletSlice.reducer;

// class WalletSlice {
//   async init(store: EnhancedStore) {
//     const response = await ipcRenderer.invoke(HANDLE_WALLET, {
//       type: IpcType.All,
//     });
//     store.dispatch(init(response));
//   }
// }

// export const walletSliceCls = new WalletSlice();
