// import { ipcRenderer } from 'electron';
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../app/store";

const ipcRenderer = window as any; //.electron.ipcRenderer;

export interface SettingsState {
  rpcUrl: string;
  flashbotSelected?: any;
  retryDelay: number;
  discordWebhook: string;
  status: "idle" | "loading" | "failed";
  flashbotOptions: any[];
  falashbotSelectId: number;
}

const initialState: SettingsState = {
  rpcUrl: "https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161",
  retryDelay: 2500,
  discordWebhook: "https://discord.com/api/webhooks/590039881015885837/wl",
  status: "idle",
  flashbotOptions: [
    {
      value: 1,
      label: "https://relay.flashbots.net/",
    },
    {
      value: 2,
      label: "https://relay.flashbots-2.net/",
    },
    {
      value: 3,
      label: "https://relay.flashbots-3.net/",
    },
  ],
  falashbotSelectId: -1,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getSettingsAsync = createAsyncThunk("settings/get", async () => {
  const response = await ipcRenderer.invoke("settings", {});
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const updateFieldAsync = createAsyncThunk(
  "settings/update",
  async () => {
    const response = await ipcRenderer.invoke("settings", {});
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const saveAsync = createAsyncThunk("settings/save", async () => {
  const response = await ipcRenderer.invoke("settings", {});
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const settingsSlice = createSlice({
  name: "settings",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateField: (state: any, action: any) => {
      const { name, value } = action.payload;

      console.log(name, value);

      state[name] = value;
    },
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      // state.value += 1;
    },
    decrement: (state) => {
      // state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      // state.value += action.payload;
    },
    init: (state, action) => {
      console.log("aaa", action);

      const { retryDelay, rpcUrl } = action.payload;

      state.retryDelay = retryDelay;
      state.rpcUrl = rpcUrl;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getSettingsAsync.fulfilled, (state) => {
      state.status = "loading";
    });
  },
});

export const { updateField, init } = settingsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSettings = (state: RootState) => state.settings;

// init

// const dispatch = useAppDispatch();
// dispatch(getSettingsAsync);

export default settingsSlice.reducer;

// ipcRenderer.invoke("app-settings", 1).then((res: any) => {
//   console.log("app-settings", res);

//   store.dispatch(init(res));
// });
